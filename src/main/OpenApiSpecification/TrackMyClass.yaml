openapi: "3.0.3"
info:
  title: Track My Class API
  version: "1.0.0"
servers:
    - url: http://localhost:8080
paths:
  /students:
    get:
      tags:
        - Student
      summary: get all students
      operationId: findAllStudent
      responses:
        200:
          description: list of all students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
  /student/{std}:
    get:
      tags:
        - Student
      summary: get all student general information by id
      operationId: getStudentInfo
      parameters:
        - $ref: "#/components/parameters/std"
      responses:
        '200':
          description: all general information about the student
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Student"

  /student/add:
    post:
      tags:
        - Student
      summary: add a new student to database
      operationId: addStudent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Student"
      responses:
        201:
          description: student created successfully in the database
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Student"

  /student/{std}/update:
    put:
      tags:
        - Student
      summary: update a student integrally
      operationId: updateStudentIntegrally
      parameters:
        - $ref: "#/components/parameters/std"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Student"
      responses:
        200:
          description: the updated student
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Student"
    patch:
      tags:
        - Student
      summary: update a student integrally
      operationId: updateStudentIntegrally
      parameters:
        - $ref: "#/components/parameters/std"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Student"
      responses:
        200:
          description: the updated student
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Student"
  /student/delete/{std}:
    delete:
      tags:
        - Student
      summary: delete a specific student by std
      operationId: deleteStudentById
      parameters:
        - $ref: "#/components/parameters/std"
      responses:
        200:
          description: the deleted student
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Student"

  /teachers:
    get:
      tags:
        - Teacher
      summary: get all teachers
      operationId: getAllTeachers
      responses:
        200:
          description: list off all teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teacher"

  /teacher/{teacherRef}:
    get:
      tags:
        - Teacher
      summary: get all info of a specific teacher
      operationId: getTeacherById
      parameters:
        - $ref: "#/components/parameters/teacherRef"
      responses:
        200:
          description: all info corresponding to the teacher reference
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
  /teacher/add:
    post:
      tags:
        - Teacher
      summary: add new teacher
      operationId: addTeacher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Teacher"
      responses:
        201:
          description: the added teacher
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Teacher"

  /teacher/{teacherRef}/update:
    put:
      tags:
        - Teacher
      summary: update teacher infos
      operationId: updateTeacherById
      parameters:
        - $ref: "#/components/parameters/teacherRef"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teacher"
      responses:
        200:
          description: teacher infos updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"

    patch:
      tags:
        - Teacher
      summary: update partial teacher info
      operationId: updateTeacherPartialById
      parameters:
        - $ref: "#/components/parameters/teacherRef"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teacher"
      responses:
        200:
          description: teacher infos updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"

  /teacher/delete/{teacherRef}:
    delete:
      tags:
        - Teacher
      summary: delete a specific teacher
      operationId: deleteTeacher
      parameters:
        - $ref: "#/components/parameters/teacherRef"
      responses:
        200:
          description: the deleted teacher
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"

  /student/attendances:
    get:
      tags:
        - Attendance
      operationId: getAllAttendances
      summary: get all attendances of all students
      responses:
        200:
          description: list of all attendances of all students for every coures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attendance"
  /student/{std}/attendances:
    get:
      tags:
        - Attendance
      operationId: getAttendancesByStudentId
      summary: get a student attendances
      parameters:
        - $ref: "#/components/parameters/std"
      responses:
        200:
          description: an object that contains the student infos and list of all his/her attendances
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/AttendanceMatcher"

  /attendances/add/student:
    post:
      tags:
        - Attendance
      operationId: addStudentsAttendance
      summary: add attendances of a given STDs list for a course
      description: "This allows to add on attendance of a student. 
      For example a J2 student assisted a J1 PROG2 course, 
      so we may add him/her as present during the course through this endpoint."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Attendances"
      responses:
        201:
          description: the student attendance has been added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttendanceMatcher"

  /attendances/add/level:
    post:
      tags:
        - Attendance
      operationId: doAttendanceByLevelYear
      summary: do an attendance of a course of a the concerned level year
      description: "This handle the attendance of a the whole student in the concerned level year. 
      Example: Doing attendance of PROG2 but where all groups such as J1 and J2 are mixed together during the course.
      This allows the attendance of the 'L1' composed together by just providing all missing STDs"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/GeneralAttendance"
      responses:
        201:
          description: lists of the attendances done (with missing)
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/AttendanceMatcher"
                    - $ref: "#/components/schemas/MissingMatcher"

  /attendances/add/group:
    post:
      tags:
        - Attendance
      operationId: doAttendanceByGroup
      summary: do an attendance of a course of a concerned specific group
      description: "This handle the attendance of a the whole student a specific group. 
      Example: Doing attendance of J1 PROG2 course. This allows the attendance for 'J1' only by just providing all missing STDs"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/GroupAttendance"
      responses:
        201:
          description: lists of the attendances done (with missing)
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/AttendanceMatcher"
                    - $ref: "#/components/schemas/MissingMatcher"
                    - $ref: "#/components/schemas/DelayMatcher"

  /student/missing:
    get:
      tags:
        - Missing
      operationId: getAllMissing
      summary: get all missing of all student for all course
      responses:
        '200':
          description: list of all missing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MissingMatcher"

  /student/{std}/missing/course:
    get:
      tags:
        - Missing
      operationId: getStudentMissingByCourse
      description: "get all missing by student by course name with 
      possibilities to search by date or by the fact it's justified or not"
      summary: get all missing according to the course
      parameters:
        - $ref: "#/components/parameters/std"
        - $ref: "#/components/parameters/course_name"
        - $ref: "#/components/parameters/is_justified"
        - in: query
          required: false
          name: month_value
          description: this is the number of the month
          schema:
            type: integer
            example: 5
        - in: query
          required: false
          name: year
          description: this is the year in where we want to see the missing
          schema:
            type: integer
            example: 2024
      responses:
        '200':
          description: list of all missing by student by course according to filter params
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MissingMatcher"
  /student/{std}/missing:
    get:
      tags:
        - Missing
      description: "get missing of a particular student with 
      possibility to filter whether we want have justified or unjustified missing"
      summary: get all or filtered missing of a student according its justification status
      operationId: getStudentJustifiedOrNotMissing
      parameters:
        - $ref: "#/components/parameters/std"
        - $ref: "#/components/parameters/is_justified"
      responses:
        '200':
          description: list of all missing of a student filtered or not by the fact it's justified or not.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/MissingMatcher"

  /missing/add/student:
    post:
      tags:
        - Missing
      summary: add missing for a give STD list
      description: Allow to add missing for a given STD list (justified missing or not)
      operationId: addStudentsMissing
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/GeneralMissings"
      responses:
        201:
          description: missing added successfully
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/MissingMatcher"

  /student/delays:
    get:
      tags:
        - Delay
      summary: get all students delays
      operationId: getAllDelays
      responses:
        200:
          description: list of all student delays
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/DelayMatcher"
  /student/{std}/delays:
    get:
      tags:
        - Delay
      summary: get all delays of a student
      operationId: getStudentDelays
      description: get list of all delays of a specific student by his or her id
      parameters:
        - $ref: "#/components/parameters/std"
      responses:
        200:
          description: an object that contains the list of all delays of the pre-defined student
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/DelayMatcher"

  /delay/add/student:
    post:
      tags:
        - Delay
      summary: add students delays
      description: This allows to add delays of students by their STDs and their lateness during a course
      operationId: addDelays
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Delays"
      responses:
        201:
          description: list of all delays that have been created according to the given list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DelayMatcher"

components:
  parameters:
    std:
      in: path
      name: std
      required: true
      schema:
        type: string
        example: "STD23028"
        description: This is the id of the student (his unique id)
    teacherRef:
      in: path
      name: teacherRef
      required: true
      schema:
        type: string
        example: "TCH21001"
        description: This is the id of the teacher (his unique id)
    is_justified:
      in: query
      required: false
      name: is_justified
      description: parameter for filtering if we want to see justified missing or unjustified ones
      schema:
        type: string
        example: "yes"

    course_name:
      in: query
      name: course_name
      required: true
      schema:
        type: string
        example: "PROG2"
  schemas:
    User:
      type: object
      properties:
        userRef:
          type: string
          example: "STD23028"
          nullable: true
        lastName:
          type: string
          example: "RAZAFINDRATELO"
          nullable: true
        firstName:
          type: string
          example: "Abegà"
          nullable: true
        email:
          type: string
          example: "hei.abega.2@gmail.com"
          nullable: true
        phoneNumber:
          type: string
          example: "+261382269435"
          nullable: true

    Student:
      type: object
      allOf:
        - $ref: "#/components/schemas/User"
        - properties:
            level:
              type: string
              enum:
                - "L1"
                - "L2"
                - "L3"
              nullable: true
            group:
              type: string
              enum:
                - "J1"
                - "J2"
                - "H1"
                - "H2"
                - "G1"
              nullable: true

    Teacher:
      type: object
      allOf:
        - $ref: "#/components/schemas/User"
        - properties:
            isAssistant:
              type: boolean

    Course:
      type: object
      properties:
        courseRef:
          type: string
          example: "L1-001"
          description: This is the id of the course apart from its name
        name:
          type: string
          example: "PROG2"
        credit:
          type: integer
          format: int32
          example: 6

    Attendance:
      type: object
      properties:
        commencement:
          type: string
          format: date-time
          description: "this is the commencement of the course 
          (date and hour of the beginning of the course)"
        termination:
          type: string
          format: date-time
          description: "this is the termination date (with hour) of the course"
        attendanceResponsible:
          $ref: "#/components/schemas/Teacher"
        course:
          $ref: "#/components/schemas/Course"

    Delay:
      type: object
      allOf:
        - $ref: "#/components/schemas/Attendance"
        - properties:
            lateness:
              type: string
              format: date-time
              description: indicates the date and hour of the lateness

    Missing:
      type: object
      allOf:
        - $ref: "#/components/schemas/Attendance"
        - properties:
            isJustified:
              type: boolean
              description: tels whether the missing is justified or not
    GenericAttendanceMatcher:
      type: object
      properties:
        student:
          $ref: "#/components/schemas/Student"

    AttendanceMatcher:
      type: object
      allOf:
        - $ref: "#/components/schemas/GenericAttendanceMatcher"
        - properties:
            attendances:
              type: array
              items:
                $ref: "#/components/schemas/Attendance"
    MissingMatcher:
      type: object
      allOf:
        - $ref: "#/components/schemas/GenericAttendanceMatcher"
        - properties:
            missingList:
              type: array
              items:
                $ref: "#/components/schemas/Missing"
    DelayMatcher:
      type: object
      allOf:
        - $ref: "#/components/schemas/GenericAttendanceMatcher"
        - properties:
            delays:
              type: array
              items:
                $ref: "#/components/schemas/Delay"
    StudentDelay:
      type: object
      properties:
        std:
          type: string
          example: "STD23028"
        lateness:
          type: string
          format: date-time

    AbstractAttendance:
      type: object
      properties:
        courseName:
          type: string
          example: "PROG2"
        commencement:
          type: string
          format: date-time
        termination:
          type: string
          format: date-time

    Delays:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractAttendance"
        - properties:
            delays:
              type: array
              items:
                $ref: "#/components/schemas/StudentDelay"
            responsibleRef:
              type: string
              example: "TCH21001"


    Attendances:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractAttendance"
        - properties:
            STDs:
              type: array
              items:
                type: string
                example: "STD23028"
            responsibleRef:
              type: string
              example: "TCH24001"

    GeneralMissings:
      type: object
      allOf:
        - $ref: "#/components/schemas/AbstractAttendance"
        - properties:
            stdsWithMissingJustification:
              type: array
              items:
                type: string
                example: "STD23002"
              description: contains all list of STDs of students that are missing during the course WITH missing justification pieces
            stdsWithoutMissingJustification:
              type: array
              items:
                type: string
                example: "STD23001"
              description: contains all list of STDs of students that are missing during the course WITHOUT missing justification pieces
            responsibleRef:
              type: string
              example: "TCH23028"
    GeneralAttendance:
      type: object
      allOf:
        - $ref: "#/components/schemas/GeneralMissings"
        - properties:
            studentDelays:
              type: array
              items:
                $ref: "#/components/schemas/StudentDelay"

    GroupAttendance:
      type: object
      allOf:
        - properties:
            group:
              type: string
              example: "J1"
        - $ref: "#/components/schemas/GeneralAttendance"